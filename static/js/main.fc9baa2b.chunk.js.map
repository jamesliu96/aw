{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Op","b65","run","op","dict65","input","Encode","s","split","map","charAt","indexOf","join","encode","codes","Uint16Array","length","i","charCodeAt","btoa","String","fromCharCode","Uint8Array","buffer","toBin","Decode","some","validate","Error","binary","atob","bytes","fromBin","decode","is65","Set","errorStr","App","useState","setDict65","setInput","setOp","output","setOutput","outputRef","useRef","useEffect","out","_","Grid","container","component","direction","justify","alignItems","spacing","style","margin","item","TextField","multiline","rows","label","variant","value","error","helperText","width","onChange","e","currentTarget","Switch","color","checked","InputProps","readOnly","inputRef","onClick","current","select","document","execCommand","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fc9baa2b.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Switch from '@material-ui/core/Switch';\n\nenum Op {\n  Encode,\n  Decode,\n}\n\nfunction toBin(s: string) {\n  const codes = new Uint16Array(s.length);\n  for (let i = 0; i < codes.length; i++) codes[i] = s.charCodeAt(i);\n  return btoa(String.fromCharCode(...new Uint8Array(codes.buffer)));\n}\nfunction fromBin(s: string) {\n  const binary = atob(s);\n  const bytes = new Uint8Array(binary.length);\n  for (let i = 0; i < bytes.length; i++) bytes[i] = binary.charCodeAt(i);\n  return String.fromCharCode(...new Uint16Array(bytes.buffer));\n}\n\nconst b65 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nconst encode = (s: string, dict65: string): string =>\n  s\n    .split('')\n    .map((s) => dict65.charAt(b65.indexOf(s)))\n    .join('');\nconst decode = (s: string, dict65: string): string =>\n  s\n    .split('')\n    .map((s) => b65.charAt(dict65.indexOf(s)))\n    .join('');\nconst validate = (s: string, dict65: string): boolean =>\n  !s.split('').some((s) => dict65.indexOf(s) < 0);\n\nfunction run(op: Op, dict65: string, input: string): string {\n  switch (op) {\n    case Op.Encode: {\n      return encode(toBin(input), dict65);\n    }\n    case Op.Decode: {\n      if (!validate(input, dict65)) throw new Error();\n      return fromBin(decode(input, dict65));\n    }\n  }\n}\n\nconst is65 = (s: string) => s.length === 65 && [...new Set(s)].length === 65;\n\nconst errorStr = '<错误>'.split('').join('\\u200b');\n\nfunction App() {\n  const [dict65, setDict65] = useState(\n    '富强民主文明和谐自由平等公正法治爱国敬业诚信友善热祖为荣服务人崇尚科学辛勤劳动好团结互助实守见义遵纪艰苦奋斗骄赢奇迹感恩进步梦想坚'\n  );\n  const [input, setInput] = useState('');\n  const [op, setOp] = useState(Op.Encode);\n\n  const [output, setOutput] = useState('');\n\n  const outputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    let out = errorStr;\n    if (is65(dict65))\n      try {\n        out = run(op, dict65, input);\n      } catch (_) {}\n    setOutput(out);\n  }, [dict65, input, op]);\n\n  return (\n    <div>\n      <Grid\n        container\n        component='div'\n        direction='column'\n        justify='center'\n        alignItems='center'\n        spacing={1}\n        style={{ margin: '20px 0' }}\n      >\n        <Grid item>\n          <TextField\n            multiline\n            rows={5}\n            label='字典'\n            variant='outlined'\n            value={dict65}\n            error={!is65(dict65)}\n            helperText='65个唯一字符'\n            style={{ width: 300 }}\n            onChange={(e) => setDict65(e.currentTarget.value)}\n          />\n        </Grid>\n        <Grid item>\n          <TextField\n            multiline\n            rows={10}\n            label='输入'\n            variant='outlined'\n            value={input}\n            error={output === errorStr && is65(dict65)}\n            style={{ width: 300 }}\n            onChange={(e) => setInput(e.currentTarget.value)}\n          />\n        </Grid>\n        <Grid item>\n          <Grid container component='label' alignItems='center'>\n            <Grid item>编码</Grid>\n            <Grid item>\n              <Switch\n                color='primary'\n                checked={op === Op.Decode}\n                onChange={() => setOp(op === Op.Decode ? Op.Encode : Op.Decode)}\n              />\n            </Grid>\n            <Grid item>解码</Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <TextField\n            multiline\n            rows={10}\n            label='输出'\n            variant='outlined'\n            value={output}\n            style={{ width: 300 }}\n            InputProps={{ readOnly: true }}\n            inputRef={outputRef}\n            onClick={() => {\n              if (output) {\n                outputRef.current?.select();\n                document.execCommand('copy');\n              }\n            }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}